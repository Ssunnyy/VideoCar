//
//  AppDelegate.m
//  Disconnected
//


#import "AppDelegate.h"
#import "ViewController.h"

@implementation AppDelegate


@synthesize window = _window;

@synthesize udpSocket;

extern float TireBarValue[4];
extern float TireBarTemp[4];
extern char driverecord;

char laststate=0,nextstate=0;//sence control

AppDelegate *sysdgt;



//socket process
//first of all,init udp socket
-(BOOL) initUdpServer
{
    //初始化udp
	self.udpSocket = [[[AsyncUdpSocket alloc] initWithDelegate: self] autorelease];
	//绑定端口
	NSError *error = nil;
    BOOL result = [self.udpSocket bindToPort: 9527 error: &error];
    if (result){
        //启动接收线程
        [self.udpSocket receiveWithTimeout: -1 tag: 8];
    }
    
    return result;
}

struct tirebar{
    unsigned char sync1;
    unsigned char sync2;
    unsigned char index;
    unsigned char bar;
    unsigned char temp;
};


- (BOOL)onUdpSocket:(AsyncUdpSocket *)sock didReceiveData:(NSData *)data withTag:(long)tag fromHost:(NSString *)host port:(UInt16)port
{
    NSLog(@"%s %d, tag = %ld, host = %@, port = %d", __FUNCTION__, __LINE__, tag, host, port);
    
    NSString *s = [[NSString alloc] initWithData: data encoding: NSUTF8StringEncoding];
    
    NSLog(@"message = %@", s);
    
    //[self.udpSocket sendData: data toHost: host port: port withTimeout: 10 tag: tag];
    Byte *pload = (Byte *)[data bytes];
    struct tirebar *pbar=(struct tirebar *)pload;
    if((pbar->sync1==(unsigned char)0x55)&&((unsigned char)0xaa==pbar->sync2)){
        TireBarValue[pbar->index%4]=pbar->bar*3.44/100;
        TireBarTemp[pbar->index%4]=pbar->temp-50.0;
        if((TireBarValue[pbar->index%4]<=minbarvaule[pbar->index%4])||
            (TireBarValue[pbar->index%4]>=maxbarvaule[pbar->index%4])||
            (TireBarTemp[pbar->index%4]>=tempbarvaule[pbar->index%4])){
            
                nextstate=2;
            
        }else if(nextstate!=2){//return home
            
            nextstate=0;
        }
        
    }else if((pbar->sync1==(unsigned char)0x55)&&((unsigned char)0xbb==pbar->sync2)){
        nextstate=1;
        NSLog(@"famt is error!");
        
    }

    [self.udpSocket receiveWithTimeout: -1 tag: tag];
   
    NSLog(@"receive data tag=%ld",tag);
    
    
    //根据当前行车状态转换相应界面
    if((laststate!=nextstate)&&(nextstate==2)){//tire bar warm!!!
        laststate=2;
        UIStoryboard *mainstory=[UIStoryboard storyboardWithName:@"MainStoryboard" bundle:nil];
        UIViewController *homeview=[mainstory instantiateViewControllerWithIdentifier:@"tireview"];
        homeview.modalTransitionStyle=UIModalTransitionStyleCoverVertical;
        homeview.modalPresentationStyle=UIModalPresentationFormSheet;
        /*[self.window.rootViewController presentViewController:homeview animated:YES completion:nil];*/
        UIWindow *myWindow = self.window;
        myWindow.backgroundColor=[UIColor whiteColor];
        myWindow.rootViewController = homeview;
        [myWindow makeKeyAndVisible];
        _window = myWindow;
        
        driverecord=0;
      
        
    }else if((laststate!=nextstate)&&(nextstate==1)){//back view    
        laststate=1;
        UIStoryboard *mainstory=[UIStoryboard storyboardWithName:@"MainStoryboard" bundle:nil];
        UIViewController *homeview=[mainstory instantiateViewControllerWithIdentifier:@"backview"];
        homeview.modalTransitionStyle=UIModalTransitionStyleCoverVertical;
        homeview.modalPresentationStyle=UIModalPresentationFormSheet;
        /*[self.window.rootViewController presentViewController:homeview animated:YES completion:nil];*/
        UIWindow *myWindow = self.window;
        myWindow.backgroundColor=[UIColor whiteColor];
        myWindow.rootViewController = homeview;
        [myWindow makeKeyAndVisible];
        _window = myWindow;
        
        driverecord=0;
        
    } else if((laststate!=nextstate)&&(nextstate==0)){//homeview
        laststate=0;
        UIStoryboard *mainstory=[UIStoryboard storyboardWithName:@"MainStoryboard" bundle:nil];
        UIViewController *homeview=[mainstory instantiateViewControllerWithIdentifier:@"homeview"];
        homeview.modalTransitionStyle=UIModalTransitionStyleCoverVertical;
        homeview.modalPresentationStyle=UIModalPresentationFormSheet;
        UIWindow *myWindow = self.window;
        myWindow.backgroundColor=[UIColor whiteColor];
        myWindow.rootViewController = homeview;
        [myWindow makeKeyAndVisible];
        _window = myWindow;
        
        driverecord=0;
    }
    
    //雷达信号委托代理传出，发出声音
    if((laststate==nextstate)&&(nextstate==1)){
        [self.radiodgt passradiovalue:TireBarTemp];
    }
    
    return YES;
}


/**
 * Called when the datagram with the given tag has been sent.
 **/
- (void)onUdpSocket:(AsyncUdpSocket *)sock didSendDataWithTag:(long)tag
{
    
    NSLog(@"didSendDataWithTag:(long)tag=%ld",tag);
    
}

/**
 * Called if an error occurs while trying to send a datagram.
 * This could be due to a timeout, or something more serious such as the data being too large to fit in a sigle packet.
 **/

- (BOOL)onUdpSocket:(AsyncUdpSocket *)sock didNotSendDataWithTag:(long)tag dueToError:(NSError *)error
{
    NSLog(@"%s %d", __FUNCTION__, __LINE__);
    return YES;
}


/**
 * Called if an error occurs while trying to receive a requested datagram.
 * This is generally due to a timeout, but could potentially be something else if some kind of OS error occurred.
 **/
- (void)onUdpSocket:(AsyncUdpSocket *)sock didNotReceiveDataWithTag:(long)tag dueToError:(NSError *)error
{
    NSLog(@"%s %d, tag = %ld, error = %@", __FUNCTION__, __LINE__, tag, error);
    
}

/**
 * Called when the socket is closed.
 * A socket is only closed if you explicitly call one of the close methods.
 **/
- (void)onUdpSocketDidClose:(AsyncUdpSocket *)sock
{
    NSLog(@"%s %d", __FUNCTION__, __LINE__);
}


- (void)dealloc
{
    self.udpSocket = nil;
    
    
    [super dealloc];
}








//delegate


- (void)applicationWillResignActive:(UIApplication *)application
{
    /*
     Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.
     Use this method to pause ongoing tasks, disable timers, and throttle down OpenGL ES frame rates. Games should use this method to pause the game.
     */
    
}

- (void)applicationDidEnterBackground:(UIApplication *)application
{
    /*
     Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later. 
     If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.
     */
    driverecord=0;
    
    
    
}

- (void)applicationWillEnterForeground:(UIApplication *)application
{
    /*
     Called as part of the transition from the background to the inactive state; here you can undo many of the changes made on entering the background.
     */
}

- (void)applicationDidBecomeActive:(UIApplication *)application
{
    /*
     Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.
     */
    
    
}

- (void)applicationWillTerminate:(UIApplication *)application
{
    /*
     Called when the application is about to terminate.
     Save data if appropriate.
     See also applicationDidEnterBackground:.
     */
    driverecord=0;
}

extern int abcmain(char *arg);

extern float maxbarvaule[4];
extern float minbarvaule[4];
extern float tempbarvaule[4];
extern float stdbarvaule[4];


#define MAX_TEMP 70

- (void)loaddefaultvalue{
    
    float ret;    
    userdefaults=[NSUserDefaults standardUserDefaults];
    
    ret=stdbarvaule[0]=[userdefaults floatForKey:@"LFMin"];
    maxbarvaule[0]=ret+0.4*ret;
    minbarvaule[0]=ret-0.2*ret;
    
    ret=stdbarvaule[1]=[userdefaults floatForKey:@"RFMin"];
    maxbarvaule[1]=ret+0.4*ret;
    minbarvaule[1]=ret-0.2*ret;
    
    
    ret=stdbarvaule[2]=[userdefaults floatForKey:@"LBMin"];
    maxbarvaule[2]=ret+0.4*ret;
    minbarvaule[2]=ret-0.2*ret;
    
    ret=stdbarvaule[3]=[userdefaults floatForKey:@"RBMin"];
    maxbarvaule[3]=ret+0.4*ret;
    minbarvaule[3]=ret-0.2*ret;
 
    
    
    
    maxbarvaule[1]=[userdefaults floatForKey:@"RFMax"];
    minbarvaule[1]=[userdefaults floatForKey:@"RFMin"];
    tempbarvaule[1]=[userdefaults floatForKey:@"RFTemp"];
    
    maxbarvaule[2]=[userdefaults floatForKey:@"LBMax"];
    minbarvaule[2]=[userdefaults floatForKey:@"LBMin"];
    tempbarvaule[2]=[userdefaults floatForKey:@"LBTemp"];
    
    maxbarvaule[3]=[userdefaults floatForKey:@"RBMax"];
    minbarvaule[3]=[userdefaults floatForKey:@"RBMin"];
    tempbarvaule[3]=[userdefaults floatForKey:@"RBTemp"];
    
    tempbarvaule[0]=MAX_TEMP;
    tempbarvaule[1]=MAX_TEMP;
    tempbarvaule[2]=MAX_TEMP;
    tempbarvaule[3]=MAX_TEMP;
    
    
    
    
    
}


- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
    NSString *msg= [self initUdpServer] ? @"OK" : @"Fail!";
    NSLog(@"start udp:%@",msg);
    
    sysdgt=self;
    
    [self loaddefaultvalue];
    
    
    //driver video thread
    NSString *avipath=[NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0];
   /* NSString *filestr=[avipath stringByAppendingPathComponent:@"ios.avi"];
    char *avifile=[filestr cStringUsingEncoding:NSASCIIStringEncoding];*/
    char *avifile=[avipath cStringUsingEncoding:NSASCIIStringEncoding];
    
    pthread_t p;
    pthread_create(&p, NULL, abcmain, avifile);
    
    [[UIApplication sharedApplication]setIdleTimerDisabled:YES];
      
   
    return YES;
}





@end
